using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using NWayland.Interop;
using NWayland.Protocols.Aurora.Wayland;

#nullable enable
// <auto-generated/>
namespace NWayland.Protocols.Aurora.QtWindowmanager
{
    public sealed unsafe partial class QtWindowmanager : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static QtWindowmanager()
        {
            NWayland.Protocols.Aurora.QtWindowmanager.QtWindowmanager.WlInterface = new WlInterface("qt_windowmanager", 1, new WlMessage[] {
                new WlMessage("open_url", "us", new WlInterface*[] { null, null })
            }, new WlMessage[] {
                new WlMessage("hints", "i", new WlInterface*[] { null }),
                new WlMessage("quit", "", new WlInterface*[] { })
            });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Aurora.QtWindowmanager.QtWindowmanager.WlInterface);
        }

        /// <summary>
        /// If remaining is not 0 this is a multipart request, and
        /// the server must concatenate subsequent requst urls to and
        /// including a request where remaining is set to 0, before
        /// it can handle the url.
        /// </summary>
        public void OpenUrl(uint @remaining, string @url)
        {
            if (@url == null)
                throw new ArgumentNullException("url");
            using var __marshalled__url = new NWaylandMarshalledString(@url);
            WlArgument* __args = stackalloc WlArgument[] {
                @remaining,
                __marshalled__url
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
        }

        public interface IEvents
        {
            void OnHints(NWayland.Protocols.Aurora.QtWindowmanager.QtWindowmanager eventSender, int @showIsFullscreen);
            void OnQuit(NWayland.Protocols.Aurora.QtWindowmanager.QtWindowmanager eventSender);
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
            switch (opcode)
            {
                case 0:
                    Events?.OnHints(this, arguments[0].Int32);
                    break;
                case 1:
                    Events?.OnQuit(this);
                    break;
            }
        }

        private class ProxyFactory : IBindFactory<QtWindowmanager>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Aurora.QtWindowmanager.QtWindowmanager.WlInterface);
            }

            public QtWindowmanager Create(IntPtr handle, int version)
            {
                return new QtWindowmanager(handle, version);
            }
        }

        public static IBindFactory<QtWindowmanager> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "qt_windowmanager";
        public const int InterfaceVersion = 1;

        public QtWindowmanager(IntPtr handle, int version) : base(handle, version)
        {
        }
    }
}